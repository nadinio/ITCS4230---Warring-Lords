<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Global Variables 

//turns red when using a variable. red player goes first
global.state = states.red_turn; 
global.selected = noone;
global.moving = false;
global.attacking = false;

global.damage_dealt = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Loop control - check the entire grid
row = 128;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// button variables

hovering = 0; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State Control
switch(global.state)
{
    case states.red_turn: scr_state_red_player_turn(); break;
    case states.blue_turn: scr_state_red_player_turn(); break;// fix later for blue team state
    break; 
}


if point_in_rectangle(window_mouse_get_x(),window_mouse_get_y(),615,10,780,60) &amp;&amp; hovering = 0// check for mouse hovering 
{
    draw_set_alpha(0.8); //If the mouse is in the the area of our button then we set the opacity to 0.8
    hovering = 1; //Set the hovering to 1 since we are hovering over the first button
};
else //If the mouse is not inside the point
{
    draw_set_alpha(0.5); //Set the alpha back to normal
};

draw_set_color(c_gray); //Set the color to gray for our button 
draw_rectangle(615,10,780,60,false); //Draw our button
draw_set_color(c_black); //Set the color to black 
draw_set_halign(fa_center); //Center text (horizontal)
draw_set_valign(fa_center); //Center text (verticle)
draw_text(700, 60,"End Turn"); //Draw our button text


if mouse_check_button_pressed(mb_left) &amp;&amp; hovering &gt; 0 //If the mouse button is pressed &amp; we are hovering over a button
{
    switch global.states
    {
        case red_turn: 
        {
            with (par_player)
            {
                pixel_dist = orig_pixel_dist;
                attacked = false;
            }
            if(instance_number(par_enemy)&gt; 0) {global.state = states.blue_turn;} // if blue team has any units its there turn 
            /*this if will need to be modifed so that when the capital is destroyed the game ends*/
            
            show_message("its is now blue players turn")
        } 
        break;
        
        case blue_turn: 
        {
            with (par_player)
            {
                pixel_dist = orig_pixel_dist;
                attacked = false;
            }
            if(instance_number(par_enemy)&gt; 0) {global.state = states.red_turn;} // if blue team has any units its there turn 
            /*this if will need to be modifed so that when the capital is destroyed the game ends*/
            
            show_message("its is now red players turn")
        } 
        break;  
    };
};

//Lastly we set hovering back to 0
hovering = 0;


if (keyboard_check_pressed(ord("R")))// pressing r will now reset move points
{
    with (par_player)
    {
        pixel_dist = orig_pixel_dist;
        attacked = false;
    }
    if(instance_number(par_enemy)&gt; 0)
    {global.state = states.blue_turn;}
}













</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
